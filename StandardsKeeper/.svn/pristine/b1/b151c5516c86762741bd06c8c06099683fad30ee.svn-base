package com.hygenics.jdbc;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * This class handles all calls to  the database.
 * It simply provides access to the database with only the exception
 * that it will check if an IP address is in use by the domain.
 * 
 * Requires a jdbctempalte and a table.
 * 
 * Methods include:
 *      -dropProxy(ip,domain)
 *      -dropAllProxies(domain)
 *      -addProxy(ip,domain)
 *      -getIps(domain)
 *      -checkProxy(ip,domain)
 *      -truncate()
 * 
 * Access to the methods requires ownership of an instantiated class.
 * 
 * @author aevans
 *
 */
public class DatabaseHandler {
	
	@Autowired
	@Qualifier("jdbcTemplate")
	private JdbcTemplate template;
	
	
	private String table;
	
	
	private String authTable;
	
	private String proxyList;
	
	
	public String getTable() {
		return table;
	}
	
	@Required
	public void setProxyList(String proxyList) {
		this.proxyList = proxyList;
	}
	
	@Required
	public void setAuthTable(String authTable) {
		this.authTable = authTable;
	}


	@Required
	public void setTable(String table) {
		this.table = table;
	}
	
	
	/**
	 * Checks to see if access is allowed based on an authentication String 
	 * @param authString
	 * @return
	 */
	public boolean isAuthorized(String authString){
		//this.template.queryForList("SELECT * FROM %s WHERE crypt('%s',auth_string) = auth_string".format(authTable, authString));
		return true; //must be implemented from database
	}
	
	
	
	public boolean resetProxies(){
		boolean reset = false;
		return reset;
	}
	
	/**
	 * Creates a Proxy Object for use in Generating a Database.
	 * 
	 * @author aevans
	 *
	 */
	private class ProxyObject{
		String proxy = null;
		String port = null;
		String vendor = null;
		
		/**
		 * Constructor expecting the input to be a string in the for IPV4/IPV6:port-Vendor with at least
		 * the IPV4 or IPV6 address.
		 * @param inProxyString
		 */
		ProxyObject(String inProxyString){
			String proxyString = inProxyString;
			String[] proxparts = proxyString.trim().split(":");
			Pattern p = Pattern.compile("\\d+\\.\\d+");
			Matcher m = p.matcher(proxyString);
			if(m.find()){
				if(proxparts.length > 1){
					this.proxy = proxparts[0];
					proxparts = proxparts[1].split("-");
					this.port = proxparts[0];
					if(proxparts.length ==2){
						this.vendor = proxparts[1];
					}
				}else if(proxparts.length > 0){
					proxparts = proxyString.split("-");
					this.proxy = proxparts[0];
					if(proxparts.length ==2){
						this.vendor = proxparts[1];
					}
				}
			}
		}
	}
	
	
	/**
	 * Take in the list of configured ip addresses and submit them
	 * to the database.
	 * @param iplist
	 * @return
	 */
	private boolean submitProxies(String[] iplist){
		boolean reset = false;
		
		//insert the proxies into the database
		if(iplist != null && iplist.length > 0){
			this.template.execute("DELETE FROM %s".format(this.proxyList));
			List<Object[]> dbobjs = new ArrayList<Object[]>();
			for(String obj : iplist){
				ProxyObject po = new ProxyObject(obj);
				dbobjs.add(new Object[]{po.proxy,po.port,po.vendor});
			}
					
			this.template.batchUpdate("INSERT INTO %s (proxy,port,vendor) VALUES(?,?,?)".format(this.proxyList), dbobjs);
			reset = true;
		}
		return reset;
	}
	
	/**
	 * Set the proxy list from a dedicated line separated list of proxies.
	 * This would be useful for immediate resetting of many proxies. Without
	 * reloading the entire configuration.
	 * 
	 * @param		 conf			The configuration file to use (line separated ips only)
	 * @return		 The boolean specifying whether the proxies were reset.
	 */
	public boolean resetProxiesFromFile(File conf){
		boolean reset = false;
		String[] iplist = null;
		//read file
		try(FileInputStream fis = new FileInputStream(conf)){
			StringBuilder builder = new StringBuilder();
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			while(fis.available() > 0){
				byte[] fbytes = new byte[Math.min(fis.available(), 1024)];
				baos.write(fis.read(fbytes));
				builder.append(baos.toString());
			}
			
			iplist = builder.toString().split("\\n");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		return reset;
	}
	
	/**
	 * Reset the proxies from a reload of the configuration file.
	 * @return
	 */
	public boolean resetProxiesFromConf(){
		return this.submitProxies(System.getProperty("ips").split(","));
	}

	/**
	 * Drop a proxy from a domain
	 * @param ip  			 The proxy ip to drop.
	 * @param domain		 The domain to drop the proxy from.
	 */
	public void dropProxy(String ip, String domain){
		template.execute("DELETE FROM %s WHERE ip LIKE %s AND domain LIKE %s".format(table,ip,domain));
	}
	
	/**
	 * Get all inactive proxies for a domain.
	 * @return  A Map<String,List<String>> of inactive proxies and their distribution over time (t(0) is from last truncate).
	 */
	public Map<String,Object> getInactiveIPS(String domain){
		HashMap<String,Object> retLists = new HashMap<String,Object>();
		List<String> ips = this.template.queryForList("SELECT ip FROM (SELECT ip FROM %s WHERE ip NOT IN (SELECT ip FROM %s WHERE domain LIKE %s)) as q1 ORDER BY RANDOM()".format(this.proxyList,this.table,domain),String.class);
		retLists.put("ips",ips);
		
		ArrayList<Double> distribution = new ArrayList<Double>();

		Map<String,Double> distMap = this.template.query("SELECT ip,count(ip)/count(*) FROM (SELECT ip FROM %s WHERE ip NOT IN (SELECT ip FROM %s WHERE domain LIKE %s)) as q1 GROUP BY id",this.distributionExctractor()); 
		
		for(String ip : ips){
			if(distMap.containsKey(ip)){
				distribution.add(distMap.get(ip));
			}else{
				distribution.add(0.0);
			}
		}
		
		retLists.put("distribution",distribution);
		
		return retLists;
	}
	
	private ResultSetExtractor<Map<String,Double>> distributionExctractor() {
		// create the array list of json strings for the query
		return (new ResultSetExtractor<Map<String,Double>>() {

			@Override
			public Map<String,Double> extractData(ResultSet rs) throws SQLException, DataAccessException {
				Map<String,Double> results = new HashMap<String,Double>();
				while(rs.next()){
					if(rs.getMetaData().getColumnName(1).equals("ip")){
						results.put(rs.getString(1), rs.getDouble(2));
					}else{
						results.put(rs.getString(2), rs.getDouble(1));
					}
				}
				return results;
			}

		});
	}
	
	/**
	 * Drop all proxies for a domain.
	 * @param domain 		The domain to drop.
	 */
	public void dropAllProxies(String domain){
		template.execute("DELETE FROM proxies.active WHERE domain ILIKE  '%s'".format(domain));
	}
	
	
	/**
	 * Add a proxy to a specific domain.
	 * 
	 * @param ip 			The IP address to add
	 * @param domain		The domain to insert the ip under.
	 */
	public void addProxy(String ip, String domain){
		template.execute("INSERT INTO %s VALUES(%s,%s)".format(table,domain,ip));
	}
	
	
	/**
	 * Get the Ips specific to a domain.
	 * @param domain		The domain to search under.
	 * @return	A list of ips for the specified domain.
	 */
	List<String> getIps(String domain){
		return template.queryForList("SELECT ip FROM %s WHERE domain LIKE %s".format(table,domain), String.class);
	}
	
	/**
	 * Check to see if a proxy is in use.
	 * 
	 * @param ip			The IP address to check.
	 * @param domain		The domain to check under.
	 * @return 	The boolean specifiying if the IP is in use.
	 */
	public boolean checkProxy(String ip,String domain){
		return this.getIps(domain).contains(ip);
	}
	
	/**
	 * Truncate a specific table with CASCADE
	 * @param	 table		Truncates the ip table.
	 */
	public void truncate(String table){
		template.execute("TRUNCATE TABLE %s CASCADE".format(table));
	}
	
	/**
	 * Get a Map of ip statistics using the IP Statistics extractor. This is where postgreSQL is 
	 * actually required as the json_agg functions from 9.5 are used as opposed to generating a 
	 * map. via an extractor. 
	 * @return
	 */
	public String getStats(){
		String ipMap = null;
		String sql = "SELECT json_agg";
		
		SqlRowSet rst = this.template.queryForRowSet(sql); //Spring Result Set
		
		rst.first();
		
		if(rst.next()){
			ipMap = rst.getString(1); //column 1 is the json_aggregated values
		}
		rst = null; //send to gc
		return ipMap;
	}
	

}
